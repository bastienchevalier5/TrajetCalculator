<h3>Calcul de distance</h3>
@code {
    @inject DatabaseService DatabaseService;

    public async Task<List<Commune>> LoadCitiesAsync()
    {
        var options = new Microsoft.EntityFrameworkCore.DbContextOptions<TrajetCalculatorDbContext>();
        using var context = new TrajetCalculatorDbContext(options);
        return await DatabaseService.GetCommunesAsync();
    }

    private async Task<List<string>> CalculItineraire(Commune villeDepart, List<Commune> requiredCities, Commune villeArrivee)
    {
        var communes = await LoadCitiesAsync();
        var shortestPath = await FindOptimalRoute(communes, villeDepart.Label, requiredCities.Select(v => v.Label).ToList(), villeArrivee.Label);
        return shortestPath;
    }

    public async Task<List<string>> FindOptimalRoute(List<Commune> communes, string start, List<string> required, string end)
    {
        double minDistance = double.MaxValue;
        List<string> bestRoute = null;

        foreach (var perm in GetPermutations(required, required.Count))
        {
            List<string> route = new List<string> { start };
            route.AddRange(perm);
            route.Add(end);

            double totalDistance = 0;
            bool validRoute = true;

            for (int i = 0; i < route.Count - 1; i++)
            {
                var subPath = Dijkstra(communes, route[i], route[i + 1]);
                if (subPath.Count == 0)
                {
                    validRoute = false;
                    break;
                }
                totalDistance += subPath.Count - 1;
            }

            if (validRoute && totalDistance < minDistance)
            {
                minDistance = totalDistance;
                bestRoute = new List<string>(route);
            }
        }

        return bestRoute ?? new List<string>();
    }

    public List<string> Dijkstra(List<Commune> communes, string start, string end)
    {
        var distances = new Dictionary<string, double>();
        var previous = new Dictionary<string, string>();
        var pq = new SortedSet<(double, string)>();

        foreach (var commune in communes)
        {
            distances[commune.Label] = double.MaxValue;
        }
        distances[start] = 0;
        pq.Add((0, start));

        while (pq.Count > 0)
        {
            var (dist, current) = pq.Min;
            pq.Remove(pq.Min);

            if (current == end) break;

            var currentCommune = communes.First(v => v.Label == current);

            foreach (var neighbor in communes)
            {
                if (neighbor.Label == current) continue;

                double newDist = dist + CalculDistanceVille(currentCommune, neighbor);
                if (newDist < distances[neighbor.Label])
                {
                    pq.Remove((distances[neighbor.Label], neighbor.Label));
                    distances[neighbor.Label] = newDist;
                    previous[neighbor.Label] = current;
                    pq.Add((newDist, neighbor.Label));
                }
            }
        }

        return ReconstructPath(previous, start, end);
    }

    private List<string> ReconstructPath(Dictionary<string, string> previous, string start, string end)
    {
        var path = new List<string>();
        for (string at = end; at != null; at = previous.GetValueOrDefault(at))
        {
            path.Add(at);
        }
        path.Reverse();
        return path.Count > 1 ? path : new List<string>();
    }

    static IEnumerable<IEnumerable<T>> GetPermutations<T>(IEnumerable<T> list, int length)
    {
        if (length == 1) return list.Select(t => new T[] { t });

        return GetPermutations(list, length - 1)
            .SelectMany(t => list.Where(e => !t.Contains(e)),
                        (t1, t2) => t1.Concat(new T[] { t2 }));
    }

    private double CalculDistanceVille(Commune villeDepart, Commune villeArrivee)
    {
        const double kmPerDegree = 111.0;

        double deltaLatitude = (double)(villeArrivee.Latitude - villeDepart.Latitude);
        double deltaLongitude = (double)(villeArrivee.Longitude - villeDepart.Longitude);

        double averageLatitudeRad = (Math.PI / 180) * ((double)(villeDepart.Latitude + villeArrivee.Latitude) / 2.0);

        double deltaX = kmPerDegree * deltaLatitude;
        double deltaY = kmPerDegree * Math.Cos(averageLatitudeRad) * deltaLongitude;

        return Math.Sqrt(deltaX * deltaX + deltaY * deltaY);
    }
}